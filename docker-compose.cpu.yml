version: '3.8'

# CPU-only version for systems without NVIDIA GPU

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: speech-postgres
    environment:
      POSTGRES_DB: speech_to_text
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: speech-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: speech-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/speech_to_text
      - REDIS_URL=redis://redis:6379
      - WHISPER_SERVICE_URL=http://whisper-service:8000
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # WhisperX Python Service (CPU Only)
  whisper-service:
    build:
      context: ./whisper-service
      dockerfile: Dockerfile.cpu
    container_name: speech-whisper-cpu
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - FORCE_CPU=true
      - CUDA_VISIBLE_DEVICES=""
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - whisper_models:/app/models
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: speech-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  whisper_models:

networks:
  default:
    name: speech-network