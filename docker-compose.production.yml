version: '3.8'

# Production configuration with Nginx reverse proxy

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: speech-postgres
    environment:
      POSTGRES_DB: speech_to_text
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: speech-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: speech-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/speech_to_text
      - REDIS_URL=redis://redis:6379
      - WHISPER_SERVICE_URL=http://whisper-service:8000
      - UPLOAD_DIR=/app/uploads
      - FRONTEND_URL=https://${DOMAIN:-localhost}
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - internal

  # WhisperX Python Service
  whisper-service:
    build:
      context: ./whisper-service
      dockerfile: Dockerfile
    container_name: speech-whisper
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - whisper_models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - internal

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: speech-frontend
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN:-localhost}/api
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - internal

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: speech-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # For SSL certificates
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - internal
      - external

volumes:
  postgres_data:
  redis_data:
  whisper_models:

networks:
  internal:
    driver: bridge
  external:
    driver: bridge